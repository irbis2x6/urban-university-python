"""Задание "Раз, два, три, четыре, пять .... Это не всё?":
Наши студенты, без исключения, - очень умные ребята. Настолько умные, что иногда по утру сами путаются в том,что
намудрили вчера вечером. Один из таких учеников уснул на клавиатуре в процессе упорной учёбы (ещё и трудолюбивые).
Тем не менее, даже после сна, его код остался рабочим и выглядел следующим образом:
data_structure = [
  [1, 2, 3],
  {'a': 4, 'b': 5},
  (6, {'cube': 7, 'drum': 8}),
  "Hello",
  ((), [{(2, 'Urban', ('Urban2', 35))}])
]
Увидев это студент задался вопросом: "А есть ли универсальное решение для подсчёта суммы всех чисел и длин всех строк?"
Да, выглядит страшно, да и обращаться нужно к каждой внутренней структуре (списку, словарю и т.д.) по-разному.
Ученику пришлось каждый раз использовать индексацию и обращение по ключам - универсального решения для таких структур
он не нашёл. Помогите сокурснику осуществить его задумку.
Что должно быть подсчитано:
1. Все числа (не важно, являются они ключами или значениям или ещё чем-то).
2. Все строки (не важно, являются они ключами или значениям или ещё чем-то)
Для примера, указанного выше, расчёт вёлся следующим образом:
1 + 2 + 3 + len('a') + 4 + len('b') + 5 + 6 + len('cube') + 7 + .... + 35 = 99
Входные данные (применение функции):
data_structure = [
[1, 2, 3],
{'a': 4, 'b': 5},
(6, {'cube': 7, 'drum': 8}),
"Hello",
((), [{(2, 'Urban', ('Urban2', 35))}])
]
result = calculate_structure_sum(data_structure)
print(result)
Выходные данные (консоль):
99
Примечания (рекомендации):
1. Весь подсчёт должен выполняться одним вызовом функции.
2. Рекомендуется применить рекурсивный вызов функции, для каждой внутренней структуры.
3. Т.к. каждая структура может содержать в себе ещё несколько элементов, можно использовать параметр *args
4. Для определения типа данного используйте функцию isinstance.
"""
data_structure = [
[1, 2, 3],
{'a': 4, 'b': 5},
(6, {'cube': 7, 'drum': 8}),
"Hello",
((), [{(2, 'Urban', ('Urban2', 35))}])
]
#total = []
total = 0
def calculate_structure_sum(data):
    global total
    # Если число - добавляем его
    if isinstance(data, (int, float)):
        total += data
        # total.append(data)
    # Если строка - добавляем её длину
    elif isinstance(data, str):
        total += len(data)
        # total.append(len(data))
    # Если список, кортеж, множество - обходим элементы
    elif isinstance(data, (list, tuple, set)):
        for sub_item in data:
            calculate_structure_sum(sub_item)
    # Если словарь - обходим ключи и значения
    elif isinstance(data, dict):
        for key, value in data.items():
            calculate_structure_sum(key)
            calculate_structure_sum(value)
    return total

result = calculate_structure_sum(data_structure)
# print(sum(result))
print(result)
